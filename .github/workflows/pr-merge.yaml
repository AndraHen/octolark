name: PR Merge

on:
  pull_request:
    types:
      - closed

permissions:
  id-token: write
  contents: read 

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Staging terraform plan"
          echo "Production terraform plan"
  stg-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    steps:
      - run: echo "Terraform apply on staging environment"
      # actual: implement it here: https://github.com/traveloka/ghaction-workflow-infracicd/blob/6cc71a84f9b7c2dd0322142c8c35c7c0b7882546/.github/workflows/cd.yml#L69
      - name: Get IAM Role with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-duration-seconds: 3600
          role-to-assume: arn:aws:iam::317144351506:role/octolark-oidc-role
          role-session-name: input-pr-info-to-base
          aws-region: ap-southeast-1
      - name: Invoke Lambda Function
        env:
          GITHUB_PR_LINK: ${{ github.event.pull_request.html_url }}
          GITHUB_PR_TITLE: "${{ github.event.pull_request.title }}"
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Insert staging PR data to Base"
          echo $GITHUB_PR_LINK
          echo $GITHUB_PR_TITLE
          echo $GITHUB_REPOSITORY
          echo $GITHUB_RUN_ID

          lambda_payload=$(cat <<EOF
          {
            "github_pr_link": "$GITHUB_PR_LINK",
            "github_pr_title": "$GITHUB_PR_TITLE",
            "github_run_id": "$GITHUB_RUN_ID",
            "github_repository": "$GITHUB_REPOSITORY",
            "environment": "staging"
          }
          EOF)

          aws lambda invoke \
            --function-name add-infradb-pr-to-base \
            --payload "$lambda_payload" \
            --cli-binary-format raw-in-base64-out \
            response.json

          echo "Lambda response:"
          cat response.json | jq

          echo "Insert production PR data to Base"
          lambda_payload=$(cat <<EOF
          {
            "github_pr_link": "$GITHUB_PR_LINK",
            "github_pr_title": "$GITHUB_PR_TITLE",
            "github_run_id": "$GITHUB_RUN_ID",
            "github_repository": "$GITHUB_REPOSITORY",
            "environment": "production"
          }
          EOF)

          aws lambda invoke \
            --function-name add-infradb-pr-to-base \
            --payload "$lambda_payload" \
            --cli-binary-format raw-in-base64-out \
            response.json

          echo "Lambda response:"
          cat response.json | jq
  prod-apply:
    needs: stg-apply
    uses: ./.github/workflows/prod-apply.yaml
    permissions:
      contents: read
      id-token: write
    with:
      GITHUB_PR_LINK: ${{ github.event.pull_request.html_url }}
      GITHUB_PR_TITLE: "${{ github.event.pull_request.title }}"